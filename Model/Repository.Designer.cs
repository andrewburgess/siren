#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Repository : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertAlbumGenre(AlbumGenre instance);
	partial void UpdateAlbumGenre(AlbumGenre instance);
	partial void DeleteAlbumGenre(AlbumGenre instance);
	partial void InsertAlbum(Album instance);
	partial void UpdateAlbum(Album instance);
	partial void DeleteAlbum(Album instance);
	partial void InsertArtistGenre(ArtistGenre instance);
	partial void UpdateArtistGenre(ArtistGenre instance);
	partial void DeleteArtistGenre(ArtistGenre instance);
	partial void InsertArtist(Artist instance);
	partial void UpdateArtist(Artist instance);
	partial void DeleteArtist(Artist instance);
	partial void InsertGenre(Genre instance);
	partial void UpdateGenre(Genre instance);
	partial void DeleteGenre(Genre instance);
	partial void InsertMediaFile(MediaFile instance);
	partial void UpdateMediaFile(MediaFile instance);
	partial void DeleteMediaFile(MediaFile instance);
	partial void InsertMediaRepository(MediaRepository instance);
	partial void UpdateMediaRepository(MediaRepository instance);
	partial void DeleteMediaRepository(MediaRepository instance);
	partial void InsertPlay(Play instance);
	partial void UpdatePlay(Play instance);
	partial void DeletePlay(Play instance);
	partial void InsertSimilarAlbum(SimilarAlbum instance);
	partial void UpdateSimilarAlbum(SimilarAlbum instance);
	partial void DeleteSimilarAlbum(SimilarAlbum instance);
	partial void InsertSimilarArtist(SimilarArtist instance);
	partial void UpdateSimilarArtist(SimilarArtist instance);
	partial void DeleteSimilarArtist(SimilarArtist instance);
	partial void InsertSimilarTrack(SimilarTrack instance);
	partial void UpdateSimilarTrack(SimilarTrack instance);
	partial void DeleteSimilarTrack(SimilarTrack instance);
	partial void InsertTrackGenre(TrackGenre instance);
	partial void UpdateTrackGenre(TrackGenre instance);
	partial void DeleteTrackGenre(TrackGenre instance);
	partial void InsertTrack(Track instance);
	partial void UpdateTrack(Track instance);
	partial void DeleteTrack(Track instance);
	#endregion
		
		public Repository(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Repository(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Repository(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Repository(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AlbumGenre> AlbumGenres
		{
			get
			{
				return this.GetTable<AlbumGenre>();
			}
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<ArtistGenre> ArtistGenres
		{
			get
			{
				return this.GetTable<ArtistGenre>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<MediaFile> MediaFiles
		{
			get
			{
				return this.GetTable<MediaFile>();
			}
		}
		
		public System.Data.Linq.Table<MediaRepository> MediaRepositories
		{
			get
			{
				return this.GetTable<MediaRepository>();
			}
		}
		
		public System.Data.Linq.Table<Play> Plays
		{
			get
			{
				return this.GetTable<Play>();
			}
		}
		
		public System.Data.Linq.Table<SimilarAlbum> SimilarAlbums
		{
			get
			{
				return this.GetTable<SimilarAlbum>();
			}
		}
		
		public System.Data.Linq.Table<SimilarArtist> SimilarArtists
		{
			get
			{
				return this.GetTable<SimilarArtist>();
			}
		}
		
		public System.Data.Linq.Table<SimilarTrack> SimilarTracks
		{
			get
			{
				return this.GetTable<SimilarTrack>();
			}
		}
		
		public System.Data.Linq.Table<TrackGenre> TrackGenres
		{
			get
			{
				return this.GetTable<TrackGenre>();
			}
		}
		
		public System.Data.Linq.Table<Track> Tracks
		{
			get
			{
				return this.GetTable<Track>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AlbumGenres")]
	public partial class AlbumGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumId;
		
		private int _GenreId;
		
		private int _Score;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Genre> _Genre;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnAlbumIdChanging(int value);
	partial void OnAlbumIdChanged();
	partial void OnGenreIdChanging(int value);
	partial void OnGenreIdChanged();
	partial void OnScoreChanging(int value);
	partial void OnScoreChanged();
	#endregion
		
		public AlbumGenre()
		{
			this._Album = default(EntityRef<Album>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumId
		{
			get
			{
				return this._AlbumId;
			}
			set
			{
				if ((this._AlbumId != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._AlbumId = value;
					this.SendPropertyChanged("AlbumId");
					this.OnAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumGenre", Storage="_Album", ThisKey="AlbumId", OtherKey="Id", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.AlbumGenres.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.AlbumGenres.Add(this);
						this._AlbumId = value.Id;
					}
					else
					{
						this._AlbumId = default(int);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_AlbumGenre", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.AlbumGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.AlbumGenres.Add(this);
						this._GenreId = value.Id;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Albums")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ArtistId;
		
		private System.Nullable<System.Guid> _MBID;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private System.Nullable<long> _LastFMListeners;
		
		private System.Nullable<long> _LastFMPlays;
		
		private EntitySet<AlbumGenre> _AlbumGenres;
		
		private EntitySet<Track> _Tracks;
		
		private EntityRef<Artist> _Artist;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnArtistIdChanging(System.Nullable<int> value);
	partial void OnArtistIdChanged();
	partial void OnMBIDChanging(System.Nullable<System.Guid> value);
	partial void OnMBIDChanged();
	partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
	partial void OnReleaseDateChanged();
	partial void OnLastFMListenersChanging(System.Nullable<long> value);
	partial void OnLastFMListenersChanged();
	partial void OnLastFMPlaysChanging(System.Nullable<long> value);
	partial void OnLastFMPlaysChanged();
	#endregion
		
		public Album()
		{
			this._AlbumGenres = new EntitySet<AlbumGenre>(new Action<AlbumGenre>(this.attach_AlbumGenres), new Action<AlbumGenre>(this.detach_AlbumGenres));
			this._Tracks = new EntitySet<Track>(new Action<Track>(this.attach_Tracks), new Action<Track>(this.detach_Tracks));
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistId", DbType="Int")]
		public System.Nullable<int> ArtistId
		{
			get
			{
				return this._ArtistId;
			}
			set
			{
				if ((this._ArtistId != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIdChanging(value);
					this.SendPropertyChanging();
					this._ArtistId = value;
					this.SendPropertyChanged("ArtistId");
					this.OnArtistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MBID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MBID
		{
			get
			{
				return this._MBID;
			}
			set
			{
				if ((this._MBID != value))
				{
					this.OnMBIDChanging(value);
					this.SendPropertyChanging();
					this._MBID = value;
					this.SendPropertyChanged("MBID");
					this.OnMBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMListeners", DbType="BigInt")]
		public System.Nullable<long> LastFMListeners
		{
			get
			{
				return this._LastFMListeners;
			}
			set
			{
				if ((this._LastFMListeners != value))
				{
					this.OnLastFMListenersChanging(value);
					this.SendPropertyChanging();
					this._LastFMListeners = value;
					this.SendPropertyChanged("LastFMListeners");
					this.OnLastFMListenersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMPlays", DbType="BigInt")]
		public System.Nullable<long> LastFMPlays
		{
			get
			{
				return this._LastFMPlays;
			}
			set
			{
				if ((this._LastFMPlays != value))
				{
					this.OnLastFMPlaysChanging(value);
					this.SendPropertyChanging();
					this._LastFMPlays = value;
					this.SendPropertyChanged("LastFMPlays");
					this.OnLastFMPlaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumGenre", Storage="_AlbumGenres", ThisKey="Id", OtherKey="AlbumId")]
		public EntitySet<AlbumGenre> AlbumGenres
		{
			get
			{
				return this._AlbumGenres;
			}
			set
			{
				this._AlbumGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Track", Storage="_Tracks", ThisKey="Id", OtherKey="Album_Id")]
		public EntitySet<Track> Tracks
		{
			get
			{
				return this._Tracks;
			}
			set
			{
				this._Tracks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Artist", ThisKey="ArtistId", OtherKey="Id", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Albums.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Albums.Add(this);
						this._ArtistId = value.Id;
					}
					else
					{
						this._ArtistId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGenres(AlbumGenre entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_AlbumGenres(AlbumGenre entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
		
		private void attach_Tracks(Track entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_Tracks(Track entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ArtistGenres")]
	public partial class ArtistGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreId;
		
		private int _ArtistId;
		
		private int _Score;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<Genre> _Genre;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnGenreIdChanging(int value);
	partial void OnGenreIdChanged();
	partial void OnArtistIdChanging(int value);
	partial void OnArtistIdChanged();
	partial void OnScoreChanging(int value);
	partial void OnScoreChanged();
	#endregion
		
		public ArtistGenre()
		{
			this._Artist = default(EntityRef<Artist>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtistId
		{
			get
			{
				return this._ArtistId;
			}
			set
			{
				if ((this._ArtistId != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIdChanging(value);
					this.SendPropertyChanging();
					this._ArtistId = value;
					this.SendPropertyChanged("ArtistId");
					this.OnArtistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_ArtistGenre", Storage="_Artist", ThisKey="ArtistId", OtherKey="Id", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.ArtistGenres.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.ArtistGenres.Add(this);
						this._ArtistId = value.Id;
					}
					else
					{
						this._ArtistId = default(int);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_ArtistGenre", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.ArtistGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.ArtistGenres.Add(this);
						this._GenreId = value.Id;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Artists")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _MBID;
		
		private System.Nullable<long> _LastFMListeners;
		
		private System.Nullable<long> _LastFMPlays;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private string _Bio;
		
		private EntitySet<Album> _Albums;
		
		private EntitySet<ArtistGenre> _ArtistGenres;
		
		private EntitySet<Track> _Tracks;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnMBIDChanging(System.Nullable<System.Guid> value);
	partial void OnMBIDChanged();
	partial void OnLastFMListenersChanging(System.Nullable<long> value);
	partial void OnLastFMListenersChanged();
	partial void OnLastFMPlaysChanging(System.Nullable<long> value);
	partial void OnLastFMPlaysChanged();
	partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
	partial void OnLastUpdateChanged();
	partial void OnBioChanging(string value);
	partial void OnBioChanged();
	#endregion
		
		public Artist()
		{
			this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
			this._ArtistGenres = new EntitySet<ArtistGenre>(new Action<ArtistGenre>(this.attach_ArtistGenres), new Action<ArtistGenre>(this.detach_ArtistGenres));
			this._Tracks = new EntitySet<Track>(new Action<Track>(this.attach_Tracks), new Action<Track>(this.detach_Tracks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MBID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MBID
		{
			get
			{
				return this._MBID;
			}
			set
			{
				if ((this._MBID != value))
				{
					this.OnMBIDChanging(value);
					this.SendPropertyChanging();
					this._MBID = value;
					this.SendPropertyChanged("MBID");
					this.OnMBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMListeners", DbType="BigInt")]
		public System.Nullable<long> LastFMListeners
		{
			get
			{
				return this._LastFMListeners;
			}
			set
			{
				if ((this._LastFMListeners != value))
				{
					this.OnLastFMListenersChanging(value);
					this.SendPropertyChanging();
					this._LastFMListeners = value;
					this.SendPropertyChanged("LastFMListeners");
					this.OnLastFMListenersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMPlays", DbType="BigInt")]
		public System.Nullable<long> LastFMPlays
		{
			get
			{
				return this._LastFMPlays;
			}
			set
			{
				if ((this._LastFMPlays != value))
				{
					this.OnLastFMPlaysChanging(value);
					this.SendPropertyChanging();
					this._LastFMPlays = value;
					this.SendPropertyChanged("LastFMPlays");
					this.OnLastFMPlaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Albums", ThisKey="Id", OtherKey="ArtistId")]
		public EntitySet<Album> Albums
		{
			get
			{
				return this._Albums;
			}
			set
			{
				this._Albums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_ArtistGenre", Storage="_ArtistGenres", ThisKey="Id", OtherKey="ArtistId")]
		public EntitySet<ArtistGenre> ArtistGenres
		{
			get
			{
				return this._ArtistGenres;
			}
			set
			{
				this._ArtistGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Track", Storage="_Tracks", ThisKey="Id", OtherKey="Artist_Id")]
		public EntitySet<Track> Tracks
		{
			get
			{
				return this._Tracks;
			}
			set
			{
				this._Tracks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_ArtistGenres(ArtistGenre entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_ArtistGenres(ArtistGenre entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_Tracks(Track entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Tracks(Track entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Genres")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AlbumGenre> _AlbumGenres;
		
		private EntitySet<ArtistGenre> _ArtistGenres;
		
		private EntitySet<TrackGenre> _TrackGenres;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	#endregion
		
		public Genre()
		{
			this._AlbumGenres = new EntitySet<AlbumGenre>(new Action<AlbumGenre>(this.attach_AlbumGenres), new Action<AlbumGenre>(this.detach_AlbumGenres));
			this._ArtistGenres = new EntitySet<ArtistGenre>(new Action<ArtistGenre>(this.attach_ArtistGenres), new Action<ArtistGenre>(this.detach_ArtistGenres));
			this._TrackGenres = new EntitySet<TrackGenre>(new Action<TrackGenre>(this.attach_TrackGenres), new Action<TrackGenre>(this.detach_TrackGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_AlbumGenre", Storage="_AlbumGenres", ThisKey="Id", OtherKey="GenreId")]
		public EntitySet<AlbumGenre> AlbumGenres
		{
			get
			{
				return this._AlbumGenres;
			}
			set
			{
				this._AlbumGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_ArtistGenre", Storage="_ArtistGenres", ThisKey="Id", OtherKey="GenreId")]
		public EntitySet<ArtistGenre> ArtistGenres
		{
			get
			{
				return this._ArtistGenres;
			}
			set
			{
				this._ArtistGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_TrackGenre", Storage="_TrackGenres", ThisKey="Id", OtherKey="GenreId")]
		public EntitySet<TrackGenre> TrackGenres
		{
			get
			{
				return this._TrackGenres;
			}
			set
			{
				this._TrackGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGenres(AlbumGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_AlbumGenres(AlbumGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
		
		private void attach_ArtistGenres(ArtistGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_ArtistGenres(ArtistGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
		
		private void attach_TrackGenres(TrackGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_TrackGenres(TrackGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MediaFiles")]
	public partial class MediaFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullPath;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _LastModified;
		
		private long _Size;
		
		private string _FileType;
		
		private int _Tracks_Id;
		
		private System.Nullable<int> _Repository_Id;
		
		private EntityRef<Track> _Track;
		
		private EntityRef<MediaRepository> _MediaRepository;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnFullPathChanging(string value);
	partial void OnFullPathChanged();
	partial void OnDateAddedChanging(System.DateTime value);
	partial void OnDateAddedChanged();
	partial void OnLastModifiedChanging(System.DateTime value);
	partial void OnLastModifiedChanged();
	partial void OnSizeChanging(long value);
	partial void OnSizeChanged();
	partial void OnFileTypeChanging(string value);
	partial void OnFileTypeChanged();
	partial void OnTracks_IdChanging(int value);
	partial void OnTracks_IdChanged();
	partial void OnRepository_IdChanging(System.Nullable<int> value);
	partial void OnRepository_IdChanged();
	#endregion
		
		public MediaFile()
		{
			this._Track = default(EntityRef<Track>);
			this._MediaRepository = default(EntityRef<MediaRepository>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullPath", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="BigInt NOT NULL")]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tracks_Id", DbType="Int NOT NULL")]
		public int Tracks_Id
		{
			get
			{
				return this._Tracks_Id;
			}
			set
			{
				if ((this._Tracks_Id != value))
				{
					if (this._Track.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTracks_IdChanging(value);
					this.SendPropertyChanging();
					this._Tracks_Id = value;
					this.SendPropertyChanged("Tracks_Id");
					this.OnTracks_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repository_Id", DbType="Int")]
		public System.Nullable<int> Repository_Id
		{
			get
			{
				return this._Repository_Id;
			}
			set
			{
				if ((this._Repository_Id != value))
				{
					if (this._MediaRepository.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepository_IdChanging(value);
					this.SendPropertyChanging();
					this._Repository_Id = value;
					this.SendPropertyChanged("Repository_Id");
					this.OnRepository_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_MediaFile", Storage="_Track", ThisKey="Tracks_Id", OtherKey="Id", IsForeignKey=true)]
		public Track Track
		{
			get
			{
				return this._Track.Entity;
			}
			set
			{
				Track previousValue = this._Track.Entity;
				if (((previousValue != value) 
							|| (this._Track.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Track.Entity = null;
						previousValue.MediaFiles.Remove(this);
					}
					this._Track.Entity = value;
					if ((value != null))
					{
						value.MediaFiles.Add(this);
						this._Tracks_Id = value.Id;
					}
					else
					{
						this._Tracks_Id = default(int);
					}
					this.SendPropertyChanged("Track");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaRepository_MediaFile", Storage="_MediaRepository", ThisKey="Repository_Id", OtherKey="Id", IsForeignKey=true)]
		public MediaRepository MediaRepository
		{
			get
			{
				return this._MediaRepository.Entity;
			}
			set
			{
				MediaRepository previousValue = this._MediaRepository.Entity;
				if (((previousValue != value) 
							|| (this._MediaRepository.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaRepository.Entity = null;
						previousValue.MediaFiles.Remove(this);
					}
					this._MediaRepository.Entity = value;
					if ((value != null))
					{
						value.MediaFiles.Add(this);
						this._Repository_Id = value.Id;
					}
					else
					{
						this._Repository_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("MediaRepository");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MediaRepositories")]
	public partial class MediaRepository : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _LastScanned;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntitySet<MediaFile> _MediaFiles;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnLocationChanging(string value);
	partial void OnLocationChanged();
	partial void OnLastScannedChanging(System.Nullable<System.DateTime> value);
	partial void OnLastScannedChanged();
	partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
	partial void OnDateAddedChanged();
	#endregion
		
		public MediaRepository()
		{
			this._MediaFiles = new EntitySet<MediaFile>(new Action<MediaFile>(this.attach_MediaFiles), new Action<MediaFile>(this.detach_MediaFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastScanned", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastScanned
		{
			get
			{
				return this._LastScanned;
			}
			set
			{
				if ((this._LastScanned != value))
				{
					this.OnLastScannedChanging(value);
					this.SendPropertyChanging();
					this._LastScanned = value;
					this.SendPropertyChanged("LastScanned");
					this.OnLastScannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaRepository_MediaFile", Storage="_MediaFiles", ThisKey="Id", OtherKey="Repository_Id")]
		public EntitySet<MediaFile> MediaFiles
		{
			get
			{
				return this._MediaFiles;
			}
			set
			{
				this._MediaFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaFiles(MediaFile entity)
		{
			this.SendPropertyChanging();
			entity.MediaRepository = this;
		}
		
		private void detach_MediaFiles(MediaFile entity)
		{
			this.SendPropertyChanging();
			entity.MediaRepository = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plays")]
	public partial class Play : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Track_Id;
		
		private System.Nullable<System.DateTime> _DatePlayed;
		
		private System.Nullable<double> _Percentage;
		
		private EntityRef<Track> _Track;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnTrack_IdChanging(System.Nullable<int> value);
	partial void OnTrack_IdChanged();
	partial void OnDatePlayedChanging(System.Nullable<System.DateTime> value);
	partial void OnDatePlayedChanged();
	partial void OnPercentageChanging(System.Nullable<double> value);
	partial void OnPercentageChanged();
	#endregion
		
		public Play()
		{
			this._Track = default(EntityRef<Track>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Track_Id", DbType="Int")]
		public System.Nullable<int> Track_Id
		{
			get
			{
				return this._Track_Id;
			}
			set
			{
				if ((this._Track_Id != value))
				{
					if (this._Track.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrack_IdChanging(value);
					this.SendPropertyChanging();
					this._Track_Id = value;
					this.SendPropertyChanged("Track_Id");
					this.OnTrack_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePlayed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePlayed
		{
			get
			{
				return this._DatePlayed;
			}
			set
			{
				if ((this._DatePlayed != value))
				{
					this.OnDatePlayedChanging(value);
					this.SendPropertyChanging();
					this._DatePlayed = value;
					this.SendPropertyChanged("DatePlayed");
					this.OnDatePlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Float")]
		public System.Nullable<double> Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_Play", Storage="_Track", ThisKey="Track_Id", OtherKey="Id", IsForeignKey=true)]
		public Track Track
		{
			get
			{
				return this._Track.Entity;
			}
			set
			{
				Track previousValue = this._Track.Entity;
				if (((previousValue != value) 
							|| (this._Track.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Track.Entity = null;
						previousValue.Plays.Remove(this);
					}
					this._Track.Entity = value;
					if ((value != null))
					{
						value.Plays.Add(this);
						this._Track_Id = value.Id;
					}
					else
					{
						this._Track_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Track");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SimilarAlbums")]
	public partial class SimilarAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Album1;
		
		private int _Album2;
		
		private string _Score;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnAlbum1Changing(int value);
	partial void OnAlbum1Changed();
	partial void OnAlbum2Changing(int value);
	partial void OnAlbum2Changed();
	partial void OnScoreChanging(string value);
	partial void OnScoreChanged();
	#endregion
		
		public SimilarAlbum()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Album1
		{
			get
			{
				return this._Album1;
			}
			set
			{
				if ((this._Album1 != value))
				{
					this.OnAlbum1Changing(value);
					this.SendPropertyChanging();
					this._Album1 = value;
					this.SendPropertyChanged("Album1");
					this.OnAlbum1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Album2
		{
			get
			{
				return this._Album2;
			}
			set
			{
				if ((this._Album2 != value))
				{
					this.OnAlbum2Changing(value);
					this.SendPropertyChanging();
					this._Album2 = value;
					this.SendPropertyChanged("Album2");
					this.OnAlbum2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SimilarArtists")]
	public partial class SimilarArtist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Artist2;
		
		private int _Artist1;
		
		private string _Score;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnArtist2Changing(int value);
	partial void OnArtist2Changed();
	partial void OnArtist1Changing(int value);
	partial void OnArtist1Changed();
	partial void OnScoreChanging(string value);
	partial void OnScoreChanged();
	#endregion
		
		public SimilarArtist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Artist2
		{
			get
			{
				return this._Artist2;
			}
			set
			{
				if ((this._Artist2 != value))
				{
					this.OnArtist2Changing(value);
					this.SendPropertyChanging();
					this._Artist2 = value;
					this.SendPropertyChanged("Artist2");
					this.OnArtist2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Artist1
		{
			get
			{
				return this._Artist1;
			}
			set
			{
				if ((this._Artist1 != value))
				{
					this.OnArtist1Changing(value);
					this.SendPropertyChanging();
					this._Artist1 = value;
					this.SendPropertyChanged("Artist1");
					this.OnArtist1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SimilarTracks")]
	public partial class SimilarTrack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Track1;
		
		private int _Track2;
		
		private string _Score;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnTrack1Changing(int value);
	partial void OnTrack1Changed();
	partial void OnTrack2Changing(int value);
	partial void OnTrack2Changed();
	partial void OnScoreChanging(string value);
	partial void OnScoreChanged();
	#endregion
		
		public SimilarTrack()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Track1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Track1
		{
			get
			{
				return this._Track1;
			}
			set
			{
				if ((this._Track1 != value))
				{
					this.OnTrack1Changing(value);
					this.SendPropertyChanging();
					this._Track1 = value;
					this.SendPropertyChanged("Track1");
					this.OnTrack1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Track2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Track2
		{
			get
			{
				return this._Track2;
			}
			set
			{
				if ((this._Track2 != value))
				{
					this.OnTrack2Changing(value);
					this.SendPropertyChanging();
					this._Track2 = value;
					this.SendPropertyChanged("Track2");
					this.OnTrack2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TrackGenres")]
	public partial class TrackGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrackId;
		
		private int _GenreId;
		
		private int _Score;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Track> _Track;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnTrackIdChanging(int value);
	partial void OnTrackIdChanged();
	partial void OnGenreIdChanging(int value);
	partial void OnGenreIdChanged();
	partial void OnScoreChanging(int value);
	partial void OnScoreChanged();
	#endregion
		
		public TrackGenre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Track = default(EntityRef<Track>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrackId
		{
			get
			{
				return this._TrackId;
			}
			set
			{
				if ((this._TrackId != value))
				{
					if (this._Track.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrackIdChanging(value);
					this.SendPropertyChanging();
					this._TrackId = value;
					this.SendPropertyChanged("TrackId");
					this.OnTrackIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_TrackGenre", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.TrackGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.TrackGenres.Add(this);
						this._GenreId = value.Id;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_TrackGenre", Storage="_Track", ThisKey="TrackId", OtherKey="Id", IsForeignKey=true)]
		public Track Track
		{
			get
			{
				return this._Track.Entity;
			}
			set
			{
				Track previousValue = this._Track.Entity;
				if (((previousValue != value) 
							|| (this._Track.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Track.Entity = null;
						previousValue.TrackGenres.Remove(this);
					}
					this._Track.Entity = value;
					if ((value != null))
					{
						value.TrackGenres.Add(this);
						this._TrackId = value.Id;
					}
					else
					{
						this._TrackId = default(int);
					}
					this.SendPropertyChanged("Track");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tracks")]
	public partial class Track : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _TrackNumber;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<int> _BPM;
		
		private System.Nullable<int> _BitRate;
		
		private string _Comments;
		
		private string _Composer;
		
		private System.Nullable<int> _DiscNumber;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private System.Nullable<int> _SampleRate;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Artist_Id;
		
		private System.Nullable<int> _Album_Id;
		
		private System.Nullable<System.Guid> _MBID;
		
		private System.Nullable<long> _LastFMListeners;
		
		private System.Nullable<long> _LastFMPlays;
		
		private string _Description;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<int> _Score;
		
		private EntitySet<MediaFile> _MediaFiles;
		
		private EntitySet<Play> _Plays;
		
		private EntitySet<TrackGenre> _TrackGenres;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Artist> _Artist;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnTrackNumberChanging(string value);
	partial void OnTrackNumberChanged();
	partial void OnDurationChanging(System.Nullable<int> value);
	partial void OnDurationChanged();
	partial void OnBPMChanging(System.Nullable<int> value);
	partial void OnBPMChanged();
	partial void OnBitRateChanging(System.Nullable<int> value);
	partial void OnBitRateChanged();
	partial void OnCommentsChanging(string value);
	partial void OnCommentsChanged();
	partial void OnComposerChanging(string value);
	partial void OnComposerChanged();
	partial void OnDiscNumberChanging(System.Nullable<int> value);
	partial void OnDiscNumberChanged();
	partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
	partial void OnReleaseDateChanged();
	partial void OnSampleRateChanging(System.Nullable<int> value);
	partial void OnSampleRateChanged();
	partial void OnYearChanging(System.Nullable<int> value);
	partial void OnYearChanged();
	partial void OnArtist_IdChanging(System.Nullable<int> value);
	partial void OnArtist_IdChanged();
	partial void OnAlbum_IdChanging(System.Nullable<int> value);
	partial void OnAlbum_IdChanged();
	partial void OnMBIDChanging(System.Nullable<System.Guid> value);
	partial void OnMBIDChanged();
	partial void OnLastFMListenersChanging(System.Nullable<long> value);
	partial void OnLastFMListenersChanged();
	partial void OnLastFMPlaysChanging(System.Nullable<long> value);
	partial void OnLastFMPlaysChanged();
	partial void OnDescriptionChanging(string value);
	partial void OnDescriptionChanged();
	partial void OnRatingChanging(System.Nullable<int> value);
	partial void OnRatingChanged();
	partial void OnScoreChanging(System.Nullable<int> value);
	partial void OnScoreChanged();
	#endregion
		
		public Track()
		{
			this._MediaFiles = new EntitySet<MediaFile>(new Action<MediaFile>(this.attach_MediaFiles), new Action<MediaFile>(this.detach_MediaFiles));
			this._Plays = new EntitySet<Play>(new Action<Play>(this.attach_Plays), new Action<Play>(this.detach_Plays));
			this._TrackGenres = new EntitySet<TrackGenre>(new Action<TrackGenre>(this.attach_TrackGenres), new Action<TrackGenre>(this.detach_TrackGenres));
			this._Album = default(EntityRef<Album>);
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackNumber", DbType="NVarChar(4000)")]
		public string TrackNumber
		{
			get
			{
				return this._TrackNumber;
			}
			set
			{
				if ((this._TrackNumber != value))
				{
					this.OnTrackNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackNumber = value;
					this.SendPropertyChanged("TrackNumber");
					this.OnTrackNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BPM", DbType="Int")]
		public System.Nullable<int> BPM
		{
			get
			{
				return this._BPM;
			}
			set
			{
				if ((this._BPM != value))
				{
					this.OnBPMChanging(value);
					this.SendPropertyChanging();
					this._BPM = value;
					this.SendPropertyChanged("BPM");
					this.OnBPMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BitRate", DbType="Int")]
		public System.Nullable<int> BitRate
		{
			get
			{
				return this._BitRate;
			}
			set
			{
				if ((this._BitRate != value))
				{
					this.OnBitRateChanging(value);
					this.SendPropertyChanging();
					this._BitRate = value;
					this.SendPropertyChanged("BitRate");
					this.OnBitRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(4000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Composer", DbType="NVarChar(4000)")]
		public string Composer
		{
			get
			{
				return this._Composer;
			}
			set
			{
				if ((this._Composer != value))
				{
					this.OnComposerChanging(value);
					this.SendPropertyChanging();
					this._Composer = value;
					this.SendPropertyChanged("Composer");
					this.OnComposerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscNumber", DbType="Int")]
		public System.Nullable<int> DiscNumber
		{
			get
			{
				return this._DiscNumber;
			}
			set
			{
				if ((this._DiscNumber != value))
				{
					this.OnDiscNumberChanging(value);
					this.SendPropertyChanging();
					this._DiscNumber = value;
					this.SendPropertyChanged("DiscNumber");
					this.OnDiscNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleRate", DbType="Int")]
		public System.Nullable<int> SampleRate
		{
			get
			{
				return this._SampleRate;
			}
			set
			{
				if ((this._SampleRate != value))
				{
					this.OnSampleRateChanging(value);
					this.SendPropertyChanging();
					this._SampleRate = value;
					this.SendPropertyChanged("SampleRate");
					this.OnSampleRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Id", DbType="Int")]
		public System.Nullable<int> Artist_Id
		{
			get
			{
				return this._Artist_Id;
			}
			set
			{
				if ((this._Artist_Id != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtist_IdChanging(value);
					this.SendPropertyChanging();
					this._Artist_Id = value;
					this.SendPropertyChanged("Artist_Id");
					this.OnArtist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Id", DbType="Int")]
		public System.Nullable<int> Album_Id
		{
			get
			{
				return this._Album_Id;
			}
			set
			{
				if ((this._Album_Id != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbum_IdChanging(value);
					this.SendPropertyChanging();
					this._Album_Id = value;
					this.SendPropertyChanged("Album_Id");
					this.OnAlbum_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MBID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MBID
		{
			get
			{
				return this._MBID;
			}
			set
			{
				if ((this._MBID != value))
				{
					this.OnMBIDChanging(value);
					this.SendPropertyChanging();
					this._MBID = value;
					this.SendPropertyChanged("MBID");
					this.OnMBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMListeners", DbType="BigInt")]
		public System.Nullable<long> LastFMListeners
		{
			get
			{
				return this._LastFMListeners;
			}
			set
			{
				if ((this._LastFMListeners != value))
				{
					this.OnLastFMListenersChanging(value);
					this.SendPropertyChanging();
					this._LastFMListeners = value;
					this.SendPropertyChanged("LastFMListeners");
					this.OnLastFMListenersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFMPlays", DbType="BigInt")]
		public System.Nullable<long> LastFMPlays
		{
			get
			{
				return this._LastFMPlays;
			}
			set
			{
				if ((this._LastFMPlays != value))
				{
					this.OnLastFMPlaysChanging(value);
					this.SendPropertyChanging();
					this._LastFMPlays = value;
					this.SendPropertyChanged("LastFMPlays");
					this.OnLastFMPlaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_MediaFile", Storage="_MediaFiles", ThisKey="Id", OtherKey="Tracks_Id")]
		public EntitySet<MediaFile> MediaFiles
		{
			get
			{
				return this._MediaFiles;
			}
			set
			{
				this._MediaFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_Play", Storage="_Plays", ThisKey="Id", OtherKey="Track_Id")]
		public EntitySet<Play> Plays
		{
			get
			{
				return this._Plays;
			}
			set
			{
				this._Plays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Track_TrackGenre", Storage="_TrackGenres", ThisKey="Id", OtherKey="TrackId")]
		public EntitySet<TrackGenre> TrackGenres
		{
			get
			{
				return this._TrackGenres;
			}
			set
			{
				this._TrackGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Track", Storage="_Album", ThisKey="Album_Id", OtherKey="Id", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.Tracks.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.Tracks.Add(this);
						this._Album_Id = value.Id;
					}
					else
					{
						this._Album_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Track", Storage="_Artist", ThisKey="Artist_Id", OtherKey="Id", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Tracks.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Tracks.Add(this);
						this._Artist_Id = value.Id;
					}
					else
					{
						this._Artist_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaFiles(MediaFile entity)
		{
			this.SendPropertyChanging();
			entity.Track = this;
		}
		
		private void detach_MediaFiles(MediaFile entity)
		{
			this.SendPropertyChanging();
			entity.Track = null;
		}
		
		private void attach_Plays(Play entity)
		{
			this.SendPropertyChanging();
			entity.Track = this;
		}
		
		private void detach_Plays(Play entity)
		{
			this.SendPropertyChanging();
			entity.Track = null;
		}
		
		private void attach_TrackGenres(TrackGenre entity)
		{
			this.SendPropertyChanging();
			entity.Track = this;
		}
		
		private void detach_TrackGenres(TrackGenre entity)
		{
			this.SendPropertyChanging();
			entity.Track = null;
		}
	}
}
#pragma warning restore 1591
