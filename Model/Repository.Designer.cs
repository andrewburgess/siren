//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DataModel", "FK_AlbumAlbumGenres", "Albums", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Album), "AlbumGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.AlbumGenre), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_GenreAlbumGenres", "Genres", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Genre), "AlbumGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.AlbumGenre), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_AlbumTrack", "Albums", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Album), "Tracks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Track), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_PrimaryArtistAlbum", "Artists", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Model.Artist), "Albums", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Album), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_ArtistArtistGenres", "Artists", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Artist), "ArtistGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.ArtistGenre), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_GenreArtistGenres", "Genres", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Genre), "ArtistGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.ArtistGenre), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_ArtistTrack", "Artists", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Artist), "Tracks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Track), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_GenreTrackGenres", "Genres", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Genre), "TrackGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.TrackGenre), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_MediaFileTrack", "Tracks", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Track), "MediaFiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.MediaFile), true)]
[assembly: EdmRelationshipAttribute("DataModel", "FK_TrackTrackGenres", "Tracks", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Track), "TrackGenres", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.TrackGenre), true)]

#endregion

namespace Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Repository : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Repository object using the connection string found in the 'Repository' section of the application configuration file.
        /// </summary>
        public Repository() : base("name=Repository", "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Repository object.
        /// </summary>
        public Repository(string connectionString) : base(connectionString, "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Repository object.
        /// </summary>
        public Repository(EntityConnection connection) : base(connection, "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AlbumGenre> AlbumGenres
        {
            get
            {
                if ((_AlbumGenres == null))
                {
                    _AlbumGenres = base.CreateObjectSet<AlbumGenre>("AlbumGenres");
                }
                return _AlbumGenres;
            }
        }
        private ObjectSet<AlbumGenre> _AlbumGenres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Album> Albums
        {
            get
            {
                if ((_Albums == null))
                {
                    _Albums = base.CreateObjectSet<Album>("Albums");
                }
                return _Albums;
            }
        }
        private ObjectSet<Album> _Albums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ArtistGenre> ArtistGenres
        {
            get
            {
                if ((_ArtistGenres == null))
                {
                    _ArtistGenres = base.CreateObjectSet<ArtistGenre>("ArtistGenres");
                }
                return _ArtistGenres;
            }
        }
        private ObjectSet<ArtistGenre> _ArtistGenres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Artist> Artists
        {
            get
            {
                if ((_Artists == null))
                {
                    _Artists = base.CreateObjectSet<Artist>("Artists");
                }
                return _Artists;
            }
        }
        private ObjectSet<Artist> _Artists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MediaFile> MediaFiles
        {
            get
            {
                if ((_MediaFiles == null))
                {
                    _MediaFiles = base.CreateObjectSet<MediaFile>("MediaFiles");
                }
                return _MediaFiles;
            }
        }
        private ObjectSet<MediaFile> _MediaFiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SimilarAlbum> SimilarAlbums
        {
            get
            {
                if ((_SimilarAlbums == null))
                {
                    _SimilarAlbums = base.CreateObjectSet<SimilarAlbum>("SimilarAlbums");
                }
                return _SimilarAlbums;
            }
        }
        private ObjectSet<SimilarAlbum> _SimilarAlbums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SimilarArtist> SimilarArtists
        {
            get
            {
                if ((_SimilarArtists == null))
                {
                    _SimilarArtists = base.CreateObjectSet<SimilarArtist>("SimilarArtists");
                }
                return _SimilarArtists;
            }
        }
        private ObjectSet<SimilarArtist> _SimilarArtists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SimilarTrack> SimilarTracks
        {
            get
            {
                if ((_SimilarTracks == null))
                {
                    _SimilarTracks = base.CreateObjectSet<SimilarTrack>("SimilarTracks");
                }
                return _SimilarTracks;
            }
        }
        private ObjectSet<SimilarTrack> _SimilarTracks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackGenre> TrackGenres
        {
            get
            {
                if ((_TrackGenres == null))
                {
                    _TrackGenres = base.CreateObjectSet<TrackGenre>("TrackGenres");
                }
                return _TrackGenres;
            }
        }
        private ObjectSet<TrackGenre> _TrackGenres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Track> Tracks
        {
            get
            {
                if ((_Tracks == null))
                {
                    _Tracks = base.CreateObjectSet<Track>("Tracks");
                }
                return _Tracks;
            }
        }
        private ObjectSet<Track> _Tracks;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AlbumGenres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbumGenres(AlbumGenre albumGenre)
        {
            base.AddObject("AlbumGenres", albumGenre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Albums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbums(Album album)
        {
            base.AddObject("Albums", album);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ArtistGenres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToArtistGenres(ArtistGenre artistGenre)
        {
            base.AddObject("ArtistGenres", artistGenre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Artists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToArtists(Artist artist)
        {
            base.AddObject("Artists", artist);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MediaFiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMediaFiles(MediaFile mediaFile)
        {
            base.AddObject("MediaFiles", mediaFile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SimilarAlbums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSimilarAlbums(SimilarAlbum similarAlbum)
        {
            base.AddObject("SimilarAlbums", similarAlbum);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SimilarArtists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSimilarArtists(SimilarArtist similarArtist)
        {
            base.AddObject("SimilarArtists", similarArtist);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SimilarTracks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSimilarTracks(SimilarTrack similarTrack)
        {
            base.AddObject("SimilarTracks", similarTrack);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TrackGenres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTrackGenres(TrackGenre trackGenre)
        {
            base.AddObject("TrackGenres", trackGenre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tracks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTracks(Track track)
        {
            base.AddObject("Tracks", track);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="Album")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Album : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Album object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Album CreateAlbum(global::System.Int32 id, global::System.String name)
        {
            Album album = new Album();
            album.Id = id;
            album.Name = name;
            return album;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ArtistId
        {
            get
            {
                return _ArtistId;
            }
            set
            {
                OnArtistIdChanging(value);
                ReportPropertyChanging("ArtistId");
                _ArtistId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ArtistId");
                OnArtistIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ArtistId;
        partial void OnArtistIdChanging(Nullable<global::System.Int32> value);
        partial void OnArtistIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> MBID
        {
            get
            {
                return _MBID;
            }
            set
            {
                OnMBIDChanging(value);
                ReportPropertyChanging("MBID");
                _MBID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MBID");
                OnMBIDChanged();
            }
        }
        private Nullable<global::System.Guid> _MBID;
        partial void OnMBIDChanging(Nullable<global::System.Guid> value);
        partial void OnMBIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ReleaseDate
        {
            get
            {
                return _ReleaseDate;
            }
            set
            {
                OnReleaseDateChanging(value);
                ReportPropertyChanging("ReleaseDate");
                _ReleaseDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReleaseDate");
                OnReleaseDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ReleaseDate;
        partial void OnReleaseDateChanging(Nullable<global::System.DateTime> value);
        partial void OnReleaseDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMListeners
        {
            get
            {
                return _LastFMListeners;
            }
            set
            {
                OnLastFMListenersChanging(value);
                ReportPropertyChanging("LastFMListeners");
                _LastFMListeners = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMListeners");
                OnLastFMListenersChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMListeners;
        partial void OnLastFMListenersChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMListenersChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMPlays
        {
            get
            {
                return _LastFMPlays;
            }
            set
            {
                OnLastFMPlaysChanging(value);
                ReportPropertyChanging("LastFMPlays");
                _LastFMPlays = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMPlays");
                OnLastFMPlaysChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMPlays;
        partial void OnLastFMPlaysChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMPlaysChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_AlbumAlbumGenres", "AlbumGenres")]
        public EntityCollection<AlbumGenre> AlbumGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AlbumGenre>("DataModel.FK_AlbumAlbumGenres", "AlbumGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AlbumGenre>("DataModel.FK_AlbumAlbumGenres", "AlbumGenres", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_AlbumTrack", "Tracks")]
        public EntityCollection<Track> Tracks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Track>("DataModel.FK_AlbumTrack", "Tracks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Track>("DataModel.FK_AlbumTrack", "Tracks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_PrimaryArtistAlbum", "Artists")]
        public Artist Artist
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_PrimaryArtistAlbum", "Artists").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_PrimaryArtistAlbum", "Artists").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Artist> ArtistReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_PrimaryArtistAlbum", "Artists");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Artist>("DataModel.FK_PrimaryArtistAlbum", "Artists", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="AlbumGenre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AlbumGenre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AlbumGenre object.
        /// </summary>
        /// <param name="albumId">Initial value of the AlbumId property.</param>
        /// <param name="genreId">Initial value of the GenreId property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static AlbumGenre CreateAlbumGenre(global::System.Int32 albumId, global::System.Int32 genreId, global::System.Int32 score)
        {
            AlbumGenre albumGenre = new AlbumGenre();
            albumGenre.AlbumId = albumId;
            albumGenre.GenreId = genreId;
            albumGenre.Score = score;
            return albumGenre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AlbumId
        {
            get
            {
                return _AlbumId;
            }
            set
            {
                if (_AlbumId != value)
                {
                    OnAlbumIdChanging(value);
                    ReportPropertyChanging("AlbumId");
                    _AlbumId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AlbumId");
                    OnAlbumIdChanged();
                }
            }
        }
        private global::System.Int32 _AlbumId;
        partial void OnAlbumIdChanging(global::System.Int32 value);
        partial void OnAlbumIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreId
        {
            get
            {
                return _GenreId;
            }
            set
            {
                if (_GenreId != value)
                {
                    OnGenreIdChanging(value);
                    ReportPropertyChanging("GenreId");
                    _GenreId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreId");
                    OnGenreIdChanged();
                }
            }
        }
        private global::System.Int32 _GenreId;
        partial void OnGenreIdChanging(global::System.Int32 value);
        partial void OnGenreIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_AlbumAlbumGenres", "Albums")]
        public Album Album
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumAlbumGenres", "Albums").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumAlbumGenres", "Albums").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> AlbumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumAlbumGenres", "Albums");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("DataModel.FK_AlbumAlbumGenres", "Albums", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreAlbumGenres", "Genres")]
        public Genre Genre
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreAlbumGenres", "Genres").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreAlbumGenres", "Genres").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genre> GenreReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreAlbumGenres", "Genres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genre>("DataModel.FK_GenreAlbumGenres", "Genres", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="Artist")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Artist : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Artist object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Artist CreateArtist(global::System.Int32 id, global::System.String name)
        {
            Artist artist = new Artist();
            artist.Id = id;
            artist.Name = name;
            return artist;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> MBID
        {
            get
            {
                return _MBID;
            }
            set
            {
                OnMBIDChanging(value);
                ReportPropertyChanging("MBID");
                _MBID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MBID");
                OnMBIDChanged();
            }
        }
        private Nullable<global::System.Guid> _MBID;
        partial void OnMBIDChanging(Nullable<global::System.Guid> value);
        partial void OnMBIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMListeners
        {
            get
            {
                return _LastFMListeners;
            }
            set
            {
                OnLastFMListenersChanging(value);
                ReportPropertyChanging("LastFMListeners");
                _LastFMListeners = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMListeners");
                OnLastFMListenersChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMListeners;
        partial void OnLastFMListenersChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMListenersChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMPlays
        {
            get
            {
                return _LastFMPlays;
            }
            set
            {
                OnLastFMPlaysChanging(value);
                ReportPropertyChanging("LastFMPlays");
                _LastFMPlays = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMPlays");
                OnLastFMPlaysChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMPlays;
        partial void OnLastFMPlaysChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMPlaysChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastUpdate
        {
            get
            {
                return _LastUpdate;
            }
            set
            {
                OnLastUpdateChanging(value);
                ReportPropertyChanging("LastUpdate");
                _LastUpdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastUpdate");
                OnLastUpdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastUpdate;
        partial void OnLastUpdateChanging(Nullable<global::System.DateTime> value);
        partial void OnLastUpdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Bio
        {
            get
            {
                return _Bio;
            }
            set
            {
                OnBioChanging(value);
                ReportPropertyChanging("Bio");
                _Bio = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Bio");
                OnBioChanged();
            }
        }
        private global::System.String _Bio;
        partial void OnBioChanging(global::System.String value);
        partial void OnBioChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_PrimaryArtistAlbum", "Albums")]
        public EntityCollection<Album> Albums
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album>("DataModel.FK_PrimaryArtistAlbum", "Albums");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album>("DataModel.FK_PrimaryArtistAlbum", "Albums", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_ArtistArtistGenres", "ArtistGenres")]
        public EntityCollection<ArtistGenre> ArtistGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ArtistGenre>("DataModel.FK_ArtistArtistGenres", "ArtistGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ArtistGenre>("DataModel.FK_ArtistArtistGenres", "ArtistGenres", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_ArtistTrack", "Tracks")]
        public EntityCollection<Track> Tracks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Track>("DataModel.FK_ArtistTrack", "Tracks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Track>("DataModel.FK_ArtistTrack", "Tracks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="ArtistGenre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ArtistGenre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ArtistGenre object.
        /// </summary>
        /// <param name="genreId">Initial value of the GenreId property.</param>
        /// <param name="artistId">Initial value of the ArtistId property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static ArtistGenre CreateArtistGenre(global::System.Int32 genreId, global::System.Int32 artistId, global::System.Int32 score)
        {
            ArtistGenre artistGenre = new ArtistGenre();
            artistGenre.GenreId = genreId;
            artistGenre.ArtistId = artistId;
            artistGenre.Score = score;
            return artistGenre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreId
        {
            get
            {
                return _GenreId;
            }
            set
            {
                if (_GenreId != value)
                {
                    OnGenreIdChanging(value);
                    ReportPropertyChanging("GenreId");
                    _GenreId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreId");
                    OnGenreIdChanged();
                }
            }
        }
        private global::System.Int32 _GenreId;
        partial void OnGenreIdChanging(global::System.Int32 value);
        partial void OnGenreIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ArtistId
        {
            get
            {
                return _ArtistId;
            }
            set
            {
                if (_ArtistId != value)
                {
                    OnArtistIdChanging(value);
                    ReportPropertyChanging("ArtistId");
                    _ArtistId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ArtistId");
                    OnArtistIdChanged();
                }
            }
        }
        private global::System.Int32 _ArtistId;
        partial void OnArtistIdChanging(global::System.Int32 value);
        partial void OnArtistIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_ArtistArtistGenres", "Artists")]
        public Artist Artist
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistArtistGenres", "Artists").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistArtistGenres", "Artists").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Artist> ArtistReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistArtistGenres", "Artists");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Artist>("DataModel.FK_ArtistArtistGenres", "Artists", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreArtistGenres", "Genres")]
        public Genre Genre
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreArtistGenres", "Genres").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreArtistGenres", "Genres").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genre> GenreReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreArtistGenres", "Genres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genre>("DataModel.FK_GenreArtistGenres", "Genres", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Genre CreateGenre(global::System.Int32 id, global::System.String name)
        {
            Genre genre = new Genre();
            genre.Id = id;
            genre.Name = name;
            return genre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreAlbumGenres", "AlbumGenres")]
        public EntityCollection<AlbumGenre> AlbumGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AlbumGenre>("DataModel.FK_GenreAlbumGenres", "AlbumGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AlbumGenre>("DataModel.FK_GenreAlbumGenres", "AlbumGenres", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreArtistGenres", "ArtistGenres")]
        public EntityCollection<ArtistGenre> ArtistGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ArtistGenre>("DataModel.FK_GenreArtistGenres", "ArtistGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ArtistGenre>("DataModel.FK_GenreArtistGenres", "ArtistGenres", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreTrackGenres", "TrackGenres")]
        public EntityCollection<TrackGenre> TrackGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TrackGenre>("DataModel.FK_GenreTrackGenres", "TrackGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TrackGenre>("DataModel.FK_GenreTrackGenres", "TrackGenres", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="MediaFile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MediaFile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MediaFile object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="fullPath">Initial value of the FullPath property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="lastModified">Initial value of the LastModified property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="fileType">Initial value of the FileType property.</param>
        /// <param name="tracks_Id">Initial value of the Tracks_Id property.</param>
        public static MediaFile CreateMediaFile(global::System.Int32 id, global::System.String fullPath, global::System.DateTime dateAdded, global::System.DateTime lastModified, global::System.Int64 size, global::System.String fileType, global::System.Int32 tracks_Id)
        {
            MediaFile mediaFile = new MediaFile();
            mediaFile.Id = id;
            mediaFile.FullPath = fullPath;
            mediaFile.DateAdded = dateAdded;
            mediaFile.LastModified = lastModified;
            mediaFile.Size = size;
            mediaFile.FileType = fileType;
            mediaFile.Tracks_Id = tracks_Id;
            return mediaFile;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FullPath
        {
            get
            {
                return _FullPath;
            }
            set
            {
                OnFullPathChanging(value);
                ReportPropertyChanging("FullPath");
                _FullPath = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FullPath");
                OnFullPathChanged();
            }
        }
        private global::System.String _FullPath;
        partial void OnFullPathChanging(global::System.String value);
        partial void OnFullPathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastModified
        {
            get
            {
                return _LastModified;
            }
            set
            {
                OnLastModifiedChanging(value);
                ReportPropertyChanging("LastModified");
                _LastModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastModified");
                OnLastModifiedChanged();
            }
        }
        private global::System.DateTime _LastModified;
        partial void OnLastModifiedChanging(global::System.DateTime value);
        partial void OnLastModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int64 _Size;
        partial void OnSizeChanging(global::System.Int64 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FileType
        {
            get
            {
                return _FileType;
            }
            set
            {
                OnFileTypeChanging(value);
                ReportPropertyChanging("FileType");
                _FileType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FileType");
                OnFileTypeChanged();
            }
        }
        private global::System.String _FileType;
        partial void OnFileTypeChanging(global::System.String value);
        partial void OnFileTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Tracks_Id
        {
            get
            {
                return _Tracks_Id;
            }
            set
            {
                OnTracks_IdChanging(value);
                ReportPropertyChanging("Tracks_Id");
                _Tracks_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Tracks_Id");
                OnTracks_IdChanged();
            }
        }
        private global::System.Int32 _Tracks_Id;
        partial void OnTracks_IdChanging(global::System.Int32 value);
        partial void OnTracks_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_MediaFileTrack", "Tracks")]
        public Track Track
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_MediaFileTrack", "Tracks").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_MediaFileTrack", "Tracks").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Track> TrackReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_MediaFileTrack", "Tracks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Track>("DataModel.FK_MediaFileTrack", "Tracks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="SimilarAlbum")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SimilarAlbum : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SimilarAlbum object.
        /// </summary>
        /// <param name="album1">Initial value of the Album1 property.</param>
        /// <param name="album2">Initial value of the Album2 property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static SimilarAlbum CreateSimilarAlbum(global::System.Int32 album1, global::System.Int32 album2, global::System.String score)
        {
            SimilarAlbum similarAlbum = new SimilarAlbum();
            similarAlbum.Album1 = album1;
            similarAlbum.Album2 = album2;
            similarAlbum.Score = score;
            return similarAlbum;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Album1
        {
            get
            {
                return _Album1;
            }
            set
            {
                if (_Album1 != value)
                {
                    OnAlbum1Changing(value);
                    ReportPropertyChanging("Album1");
                    _Album1 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Album1");
                    OnAlbum1Changed();
                }
            }
        }
        private global::System.Int32 _Album1;
        partial void OnAlbum1Changing(global::System.Int32 value);
        partial void OnAlbum1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Album2
        {
            get
            {
                return _Album2;
            }
            set
            {
                if (_Album2 != value)
                {
                    OnAlbum2Changing(value);
                    ReportPropertyChanging("Album2");
                    _Album2 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Album2");
                    OnAlbum2Changed();
                }
            }
        }
        private global::System.Int32 _Album2;
        partial void OnAlbum2Changing(global::System.Int32 value);
        partial void OnAlbum2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.String _Score;
        partial void OnScoreChanging(global::System.String value);
        partial void OnScoreChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="SimilarArtist")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SimilarArtist : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SimilarArtist object.
        /// </summary>
        /// <param name="artist2">Initial value of the Artist2 property.</param>
        /// <param name="artist1">Initial value of the Artist1 property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static SimilarArtist CreateSimilarArtist(global::System.Int32 artist2, global::System.Int32 artist1, global::System.String score)
        {
            SimilarArtist similarArtist = new SimilarArtist();
            similarArtist.Artist2 = artist2;
            similarArtist.Artist1 = artist1;
            similarArtist.Score = score;
            return similarArtist;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Artist2
        {
            get
            {
                return _Artist2;
            }
            set
            {
                if (_Artist2 != value)
                {
                    OnArtist2Changing(value);
                    ReportPropertyChanging("Artist2");
                    _Artist2 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Artist2");
                    OnArtist2Changed();
                }
            }
        }
        private global::System.Int32 _Artist2;
        partial void OnArtist2Changing(global::System.Int32 value);
        partial void OnArtist2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Artist1
        {
            get
            {
                return _Artist1;
            }
            set
            {
                if (_Artist1 != value)
                {
                    OnArtist1Changing(value);
                    ReportPropertyChanging("Artist1");
                    _Artist1 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Artist1");
                    OnArtist1Changed();
                }
            }
        }
        private global::System.Int32 _Artist1;
        partial void OnArtist1Changing(global::System.Int32 value);
        partial void OnArtist1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.String _Score;
        partial void OnScoreChanging(global::System.String value);
        partial void OnScoreChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="SimilarTrack")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SimilarTrack : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SimilarTrack object.
        /// </summary>
        /// <param name="track1">Initial value of the Track1 property.</param>
        /// <param name="track2">Initial value of the Track2 property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static SimilarTrack CreateSimilarTrack(global::System.Int32 track1, global::System.Int32 track2, global::System.String score)
        {
            SimilarTrack similarTrack = new SimilarTrack();
            similarTrack.Track1 = track1;
            similarTrack.Track2 = track2;
            similarTrack.Score = score;
            return similarTrack;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Track1
        {
            get
            {
                return _Track1;
            }
            set
            {
                if (_Track1 != value)
                {
                    OnTrack1Changing(value);
                    ReportPropertyChanging("Track1");
                    _Track1 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Track1");
                    OnTrack1Changed();
                }
            }
        }
        private global::System.Int32 _Track1;
        partial void OnTrack1Changing(global::System.Int32 value);
        partial void OnTrack1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Track2
        {
            get
            {
                return _Track2;
            }
            set
            {
                if (_Track2 != value)
                {
                    OnTrack2Changing(value);
                    ReportPropertyChanging("Track2");
                    _Track2 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Track2");
                    OnTrack2Changed();
                }
            }
        }
        private global::System.Int32 _Track2;
        partial void OnTrack2Changing(global::System.Int32 value);
        partial void OnTrack2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.String _Score;
        partial void OnScoreChanging(global::System.String value);
        partial void OnScoreChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="Track")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Track : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Track object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="trackNumber">Initial value of the TrackNumber property.</param>
        /// <param name="duration">Initial value of the Duration property.</param>
        /// <param name="bPM">Initial value of the BPM property.</param>
        /// <param name="bitRate">Initial value of the BitRate property.</param>
        /// <param name="comments">Initial value of the Comments property.</param>
        /// <param name="composer">Initial value of the Composer property.</param>
        /// <param name="discNumber">Initial value of the DiscNumber property.</param>
        /// <param name="releaseDate">Initial value of the ReleaseDate property.</param>
        /// <param name="sampleRate">Initial value of the SampleRate property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="artist_Id">Initial value of the Artist_Id property.</param>
        /// <param name="album_Id">Initial value of the Album_Id property.</param>
        public static Track CreateTrack(global::System.Int32 id, global::System.String name, global::System.String trackNumber, global::System.Int32 duration, global::System.Int32 bPM, global::System.Int32 bitRate, global::System.String comments, global::System.String composer, global::System.Int32 discNumber, global::System.DateTime releaseDate, global::System.Int32 sampleRate, global::System.Int32 year, global::System.Int32 artist_Id, global::System.Int32 album_Id)
        {
            Track track = new Track();
            track.Id = id;
            track.Name = name;
            track.TrackNumber = trackNumber;
            track.Duration = duration;
            track.BPM = bPM;
            track.BitRate = bitRate;
            track.Comments = comments;
            track.Composer = composer;
            track.DiscNumber = discNumber;
            track.ReleaseDate = releaseDate;
            track.SampleRate = sampleRate;
            track.Year = year;
            track.Artist_Id = artist_Id;
            track.Album_Id = album_Id;
            return track;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TrackNumber
        {
            get
            {
                return _TrackNumber;
            }
            set
            {
                OnTrackNumberChanging(value);
                ReportPropertyChanging("TrackNumber");
                _TrackNumber = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TrackNumber");
                OnTrackNumberChanged();
            }
        }
        private global::System.String _TrackNumber;
        partial void OnTrackNumberChanging(global::System.String value);
        partial void OnTrackNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                OnDurationChanging(value);
                ReportPropertyChanging("Duration");
                _Duration = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Duration");
                OnDurationChanged();
            }
        }
        private global::System.Int32 _Duration;
        partial void OnDurationChanging(global::System.Int32 value);
        partial void OnDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BPM
        {
            get
            {
                return _BPM;
            }
            set
            {
                OnBPMChanging(value);
                ReportPropertyChanging("BPM");
                _BPM = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BPM");
                OnBPMChanged();
            }
        }
        private global::System.Int32 _BPM;
        partial void OnBPMChanging(global::System.Int32 value);
        partial void OnBPMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BitRate
        {
            get
            {
                return _BitRate;
            }
            set
            {
                OnBitRateChanging(value);
                ReportPropertyChanging("BitRate");
                _BitRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BitRate");
                OnBitRateChanged();
            }
        }
        private global::System.Int32 _BitRate;
        partial void OnBitRateChanging(global::System.Int32 value);
        partial void OnBitRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comments
        {
            get
            {
                return _Comments;
            }
            set
            {
                OnCommentsChanging(value);
                ReportPropertyChanging("Comments");
                _Comments = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Comments");
                OnCommentsChanged();
            }
        }
        private global::System.String _Comments;
        partial void OnCommentsChanging(global::System.String value);
        partial void OnCommentsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Composer
        {
            get
            {
                return _Composer;
            }
            set
            {
                OnComposerChanging(value);
                ReportPropertyChanging("Composer");
                _Composer = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Composer");
                OnComposerChanged();
            }
        }
        private global::System.String _Composer;
        partial void OnComposerChanging(global::System.String value);
        partial void OnComposerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiscNumber
        {
            get
            {
                return _DiscNumber;
            }
            set
            {
                OnDiscNumberChanging(value);
                ReportPropertyChanging("DiscNumber");
                _DiscNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscNumber");
                OnDiscNumberChanged();
            }
        }
        private global::System.Int32 _DiscNumber;
        partial void OnDiscNumberChanging(global::System.Int32 value);
        partial void OnDiscNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ReleaseDate
        {
            get
            {
                return _ReleaseDate;
            }
            set
            {
                OnReleaseDateChanging(value);
                ReportPropertyChanging("ReleaseDate");
                _ReleaseDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReleaseDate");
                OnReleaseDateChanged();
            }
        }
        private global::System.DateTime _ReleaseDate;
        partial void OnReleaseDateChanging(global::System.DateTime value);
        partial void OnReleaseDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SampleRate
        {
            get
            {
                return _SampleRate;
            }
            set
            {
                OnSampleRateChanging(value);
                ReportPropertyChanging("SampleRate");
                _SampleRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SampleRate");
                OnSampleRateChanged();
            }
        }
        private global::System.Int32 _SampleRate;
        partial void OnSampleRateChanging(global::System.Int32 value);
        partial void OnSampleRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Artist_Id
        {
            get
            {
                return _Artist_Id;
            }
            set
            {
                OnArtist_IdChanging(value);
                ReportPropertyChanging("Artist_Id");
                _Artist_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Artist_Id");
                OnArtist_IdChanged();
            }
        }
        private global::System.Int32 _Artist_Id;
        partial void OnArtist_IdChanging(global::System.Int32 value);
        partial void OnArtist_IdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Album_Id
        {
            get
            {
                return _Album_Id;
            }
            set
            {
                OnAlbum_IdChanging(value);
                ReportPropertyChanging("Album_Id");
                _Album_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Album_Id");
                OnAlbum_IdChanged();
            }
        }
        private global::System.Int32 _Album_Id;
        partial void OnAlbum_IdChanging(global::System.Int32 value);
        partial void OnAlbum_IdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> MBID
        {
            get
            {
                return _MBID;
            }
            set
            {
                OnMBIDChanging(value);
                ReportPropertyChanging("MBID");
                _MBID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MBID");
                OnMBIDChanged();
            }
        }
        private Nullable<global::System.Guid> _MBID;
        partial void OnMBIDChanging(Nullable<global::System.Guid> value);
        partial void OnMBIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMListeners
        {
            get
            {
                return _LastFMListeners;
            }
            set
            {
                OnLastFMListenersChanging(value);
                ReportPropertyChanging("LastFMListeners");
                _LastFMListeners = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMListeners");
                OnLastFMListenersChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMListeners;
        partial void OnLastFMListenersChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMListenersChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastFMPlays
        {
            get
            {
                return _LastFMPlays;
            }
            set
            {
                OnLastFMPlaysChanging(value);
                ReportPropertyChanging("LastFMPlays");
                _LastFMPlays = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastFMPlays");
                OnLastFMPlaysChanged();
            }
        }
        private Nullable<global::System.Int64> _LastFMPlays;
        partial void OnLastFMPlaysChanging(Nullable<global::System.Int64> value);
        partial void OnLastFMPlaysChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_AlbumTrack", "Albums")]
        public Album Album
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumTrack", "Albums").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumTrack", "Albums").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> AlbumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("DataModel.FK_AlbumTrack", "Albums");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("DataModel.FK_AlbumTrack", "Albums", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_ArtistTrack", "Artists")]
        public Artist Artist
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistTrack", "Artists").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistTrack", "Artists").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Artist> ArtistReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Artist>("DataModel.FK_ArtistTrack", "Artists");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Artist>("DataModel.FK_ArtistTrack", "Artists", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_MediaFileTrack", "MediaFiles")]
        public EntityCollection<MediaFile> MediaFiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MediaFile>("DataModel.FK_MediaFileTrack", "MediaFiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MediaFile>("DataModel.FK_MediaFileTrack", "MediaFiles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_TrackTrackGenres", "TrackGenres")]
        public EntityCollection<TrackGenre> TrackGenres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TrackGenre>("DataModel.FK_TrackTrackGenres", "TrackGenres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TrackGenre>("DataModel.FK_TrackTrackGenres", "TrackGenres", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataModel", Name="TrackGenre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackGenre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TrackGenre object.
        /// </summary>
        /// <param name="trackId">Initial value of the TrackId property.</param>
        /// <param name="genreId">Initial value of the GenreId property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        public static TrackGenre CreateTrackGenre(global::System.Int32 trackId, global::System.Int32 genreId, global::System.Int32 score)
        {
            TrackGenre trackGenre = new TrackGenre();
            trackGenre.TrackId = trackId;
            trackGenre.GenreId = genreId;
            trackGenre.Score = score;
            return trackGenre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TrackId
        {
            get
            {
                return _TrackId;
            }
            set
            {
                if (_TrackId != value)
                {
                    OnTrackIdChanging(value);
                    ReportPropertyChanging("TrackId");
                    _TrackId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TrackId");
                    OnTrackIdChanged();
                }
            }
        }
        private global::System.Int32 _TrackId;
        partial void OnTrackIdChanging(global::System.Int32 value);
        partial void OnTrackIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreId
        {
            get
            {
                return _GenreId;
            }
            set
            {
                if (_GenreId != value)
                {
                    OnGenreIdChanging(value);
                    ReportPropertyChanging("GenreId");
                    _GenreId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreId");
                    OnGenreIdChanged();
                }
            }
        }
        private global::System.Int32 _GenreId;
        partial void OnGenreIdChanging(global::System.Int32 value);
        partial void OnGenreIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_GenreTrackGenres", "Genres")]
        public Genre Genre
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreTrackGenres", "Genres").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreTrackGenres", "Genres").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genre> GenreReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("DataModel.FK_GenreTrackGenres", "Genres");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genre>("DataModel.FK_GenreTrackGenres", "Genres", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataModel", "FK_TrackTrackGenres", "Tracks")]
        public Track Track
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_TrackTrackGenres", "Tracks").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_TrackTrackGenres", "Tracks").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Track> TrackReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Track>("DataModel.FK_TrackTrackGenres", "Tracks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Track>("DataModel.FK_TrackTrackGenres", "Tracks", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
